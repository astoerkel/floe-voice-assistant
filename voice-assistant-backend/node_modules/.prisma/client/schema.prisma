// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  name           String?
  appleId        String?  @unique
  googleId       String?  @unique
  profilePicture String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  lastActive     DateTime @default(now())
  isActive       Boolean  @default(true)

  // Relationships
  integrations  Integration[]
  voiceCommands VoiceCommand[]
  conversations Conversation[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isRevoked Boolean  @default(false)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Integration {
  id           String    @id @default(cuid())
  userId       String
  type         String // 'google', 'airtable', 'microsoft'
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  scope        String?
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, type])
  @@map("integrations")
}

model VoiceCommand {
  id               String   @id @default(cuid())
  userId           String
  text             String
  audioUrl         String?
  audioSize        Int? // Size in bytes
  audioFormat      String? // mp3, wav, etc.
  intent           String?
  agentUsed        String? // coordinator, calendar, email, task, weather
  response         String?
  responseAudioUrl String?
  status           String   @default("pending") // pending, processing, completed, failed
  executionTime    Int? // milliseconds
  errorMessage     String?
  metadata         Json? // Additional data like locations, entities, etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("voice_commands")
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?
  context   Json? // Conversation context and memory
  messages  Json[] // Array of messages with metadata
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  externalId  String? // Google Calendar event ID
  title       String
  description String?
  location    String?
  startTime   DateTime
  endTime     DateTime
  isAllDay    Boolean  @default(false)
  status      String   @default("confirmed") // confirmed, cancelled, tentative
  attendees   Json? // Array of attendees
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, externalId])
  @@map("calendar_events")
}

model Email {
  id          String   @id @default(cuid())
  userId      String
  externalId  String? // Gmail message ID
  threadId    String?
  subject     String
  body        String
  from        String
  to          String[]
  cc          String[]
  bcc         String[]
  isRead      Boolean  @default(false)
  isImportant Boolean  @default(false)
  labels      String[]
  receivedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, externalId])
  @@map("emails")
}

model Task {
  id          String    @id @default(cuid())
  userId      String
  externalId  String? // Airtable record ID
  title       String
  description String?
  status      String    @default("pending") // pending, in_progress, completed, cancelled
  priority    String    @default("medium") // low, medium, high, urgent
  dueDate     DateTime?
  completedAt DateTime?
  tags        String[]
  metadata    Json? // Additional task data
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId, externalId])
  @@map("tasks")
}

model WeatherCache {
  id        String   @id @default(cuid())
  location  String   @unique
  data      Json // Weather data
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("weather_cache")
}

model AudioFile {
  id           String   @id @default(cuid())
  filename     String   @unique
  originalName String
  mimeType     String
  size         Int // Size in bytes
  duration     Int? // Duration in milliseconds
  path         String // File path on disk
  url          String // Public URL
  userId       String?
  createdAt    DateTime @default(now())

  @@map("audio_files")
}

model JobQueue {
  id          String    @id @default(cuid())
  name        String
  data        Json
  status      String    @default("pending") // pending, processing, completed, failed
  attempts    Int       @default(0)
  maxAttempts Int       @default(3)
  priority    Int       @default(0)
  delay       Int       @default(0)
  processedAt DateTime?
  failedAt    DateTime?
  completedAt DateTime?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("job_queue")
}

model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_config")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String // create, update, delete, login, logout
  resource   String // user, integration, voice_command, etc.
  resourceId String?
  details    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@map("audit_logs")
}
